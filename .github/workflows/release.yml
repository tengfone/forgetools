name: Release
on:
  push:
    branches:
      - main
    tags:
      - "v*"

# Add permissions block
permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  # Run Playwright tests first
  test:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            xvfb \
            libxtst6 \
            libxss1 \
            libgtk-3-0 \
            libnss3 \
            libasound2t64 \
            libatk1.0-0 \
            libatk-bridge2.0-0 \
            libgbm1 \
            libdrm2 \
            libxcb1 \
            libxkbcommon0 \
            libx11-6 \
            libxcomposite1 \
            libxdamage1 \
            libxext6 \
            libxfixes3 \
            libxrandr2 \
            libxrender1 \
            libpango-1.0-0 \
            libcairo2 \
            libnss3-tools \
            libxss1 \
            libsecret-1-0

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: |
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          sleep 3
          DISPLAY=:99 xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24" npm run test:ci
        env:
          CI: true
          ELECTRON_NO_SANDBOX: 1
          ELECTRON_DISABLE_SANDBOX: 1
          DEBUG: electron*,playwright*

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Generate changelog
  changelog:
    needs: [test]
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ steps.release-notes.outputs.notes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release notes
        id: release-notes
        shell: bash
        run: |
          # Get the latest tag
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          # Create release notes
          if [ -z "$latest_tag" ]; then
            # Initial release
            release_notes="## 🚀 Initial Release\n\n"
            release_notes+="### ✨ New Features\n"
            release_notes+="$(git log --pretty=format:"- %s" --grep="^feat" || echo "")\n\n"
            release_notes+="### 🐛 Bug Fixes\n"
            release_notes+="$(git log --pretty=format:"- %s" --grep="^fix" || echo "")\n\n"
            release_notes+="### 📝 Documentation\n"
            release_notes+="$(git log --pretty=format:"- %s" --grep="^docs" || echo "")\n\n"
            release_notes+="### ⚡️ Performance\n"
            release_notes+="$(git log --pretty=format:"- %s" --grep="^perf" || echo "")"
          else
            # Changes since last tag
            release_notes="## 🔄 Changes since ${latest_tag}\n\n"
            release_notes+="### ✨ New Features\n"
            release_notes+="$(git log ${latest_tag}..HEAD --pretty=format:"- %s" --grep="^feat" || echo "")\n\n"
            release_notes+="### 🐛 Bug Fixes\n"
            release_notes+="$(git log ${latest_tag}..HEAD --pretty=format:"- %s" --grep="^fix" || echo "")\n\n"
            release_notes+="### 📝 Documentation\n"
            release_notes+="$(git log ${latest_tag}..HEAD --pretty=format:"- %s" --grep="^docs" || echo "")\n\n"
            release_notes+="### ⚡️ Performance\n"
            release_notes+="$(git log ${latest_tag}..HEAD --pretty=format:"- %s" --grep="^perf" || echo "")"
          fi

          # Properly escape the content for GitHub Actions output
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$release_notes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Version bump and tag creation
  version:
    needs: [changelog]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      new_version: ${{ steps.version-bump.outputs.newTag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Bump version and push tag
        id: version-bump
        uses: phips28/gh-action-bump-version@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USER: github-actions[bot]
          GITHUB_EMAIL: github-actions[bot]@users.noreply.github.com
        with:
          tag-prefix: "v"
          commit-message: "chore(release): bump version to {{version}} [skip ci]"

      - name: Get new version
        id: get-version
        run: echo "New version will be ${{ steps.version-bump.outputs.newTag }}"

  # Build process
  build:
    needs: [version, changelog]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        arch: [x64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
          - os: ubuntu-latest
            arch: arm64
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.version.outputs.new_version }}

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Python dependencies
        run: python -m pip install setuptools

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxtst6 \
            libxss1 \
            libgtk-3-0 \
            libnss3 \
            libasound2t64 \
            libatk1.0-0 \
            libatk-bridge2.0-0 \
            libgbm1 \
            libdrm2 \
            libxcb1 \
            libxkbcommon0 \
            libx11-6 \
            libxcomposite1 \
            libxdamage1 \
            libxext6 \
            libxfixes3 \
            libxrandr2 \
            libxrender1

      - name: Install dependencies
        run: |
          npm ci
          npm run postinstall

      - name: Build Electron App
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.version.outputs.new_version }}
        run: npm run dist

      - name: Prepare artifacts
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            cd dist/mac
            zip -r ../ForgeTools-${{ needs.version.outputs.new_version }}-mac-${{ matrix.arch }}.zip ForgeTools.app
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: forgetools-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/*.exe
            dist/*.zip
            dist/*.AppImage
          if-no-files-found: ignore

  # Create Release
  release:
    needs: [build, version, changelog]
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Display structure of downloaded files
        run: ls -R dist

      - name: Move artifacts to root dist
        run: |
          mkdir -p release
          find dist -type f \( -name "*.exe" -o -name "*.zip" -o -name "*.AppImage" \) -exec mv {} release/ \;

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.version.outputs.new_version }}
          RELEASE_NOTES: ${{ needs.changelog.outputs.release_notes }}
        run: |
          gh release create "$VERSION" \
            --title "ForgeTools $VERSION" \
            --notes "# 🚀 ForgeTools $VERSION

            $RELEASE_NOTES
            
            ## 📥 Installation
            Choose the appropriate file for your platform:
            
            - 🪟 Windows: Download \`ForgeTools-Portable-$VERSION.exe\`
            - 🍎 macOS Intel: Download and unzip \`ForgeTools-$VERSION-mac-x64.zip\`
            - 🍎 macOS Apple Silicon: Download and unzip \`ForgeTools-$VERSION-mac-arm64.zip\`
            - 🐧 Linux: Download \`ForgeTools-$VERSION.AppImage\`
            
            ## 🔍 SHA-256 Checksums
            \`\`\`
            $(cd release && sha256sum * 2>/dev/null || true)
            \`\`\`" \
            --draft \
            release/*
